#include "ProjectSerializer.h"

#include <Engine/Core/EngineVersion.h>

#include <codecvt>
#include <fstream>
#include <yaml-cpp/yaml.h>

#define SHELL_ENGINE_EDITOR_VERSION "0.0.1"

#define SERIALIZE_KEY_SHELL_VERSION "Shell-Version"
#define SERIALIZE_KEY_SHELL_EDITOR_VERSION "Shell-Editor-Version"
#define SERIALIZE_KEY_PROJECT_NAME "Project-Name"

namespace Shell {

    inline YAML::Emitter& operator<<(YAML::Emitter& emitter, ProjectSettings * settings) {

        emitter << YAML::BeginMap;

        emitter << YAML::Key << "Rendering";
        emitter << YAML::Value;

        emitter << YAML::Comment("This contains the info what render api is used for a particular operating system");
        emitter << YAML::BeginMap;
        for (const auto &[os, api]: settings->getOperatingSystemRenderer()) {
            emitter << YAML::Key << GetOperatingSystemName(os);
            emitter << YAML::Value << GetRenderApiName(api);
        }
        emitter << YAML::EndMap;

        emitter << YAML::EndMap;

        return emitter;
    }

    void ProjectSerializer::SerializeToFile(Project *project) {
        std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;

        YAML::Emitter out;
        out << YAML::Comment("This file is automatically generated by the editor, do not modify it!");
        out << YAML::BeginMap;
        // Shell-Version
        out << YAML::Key << SERIALIZE_KEY_SHELL_VERSION;
        out << YAML::Value << SHELL_ENGINE_VERSION;
        // Shell-Editor-Version
        out << YAML::Key << SERIALIZE_KEY_SHELL_EDITOR_VERSION;
        out << YAML::Value << SHELL_ENGINE_EDITOR_VERSION;
        // Project name
        out << YAML::Key << SERIALIZE_KEY_PROJECT_NAME;
        out << YAML::Value << converter.to_bytes(project->GetName());

        out << YAML::Key << "Settings";
        out << YAML::Value << project->GetSettings();

        out << YAML::EndMap;

        auto projectFilePath = project->GetPath() / "project.yml";
        std::ofstream projectFile(projectFilePath);
        projectFile << out.c_str();
    }

    Project *ProjectSerializer::DeserializeFromFile(const std::filesystem::path & projectPath) {
        auto projectFilePath = projectPath / "project.yml";
        YAML::Node config = YAML::LoadFile(projectFilePath.generic_string());

        if (config[SERIALIZE_KEY_SHELL_VERSION]) {
            auto engineVersion = config[SERIALIZE_KEY_SHELL_VERSION].as<std::string>();
            SHELL_INFO("Load project");
            SHELL_INFO("Engine Version: {0}", engineVersion.c_str());
        }

        return nullptr;
    }
}